#!/bin/bash

##
##  Automate configuration script.
##  
##  Author: Kim Leo <kenpusney@gmail.com>
##  http://github.com/kenpusney
##

##
## Initialization scripts
##

curdir="`pwd`"
basedir="/usr/lib/kit"

[ -d ~/.kit ] || mkdir ~/.kit
cd ~/.kit
workdir="~/.kit"
[ -d scripts ] || mkdir scripts
[ -d configs ] || mkdir configs
[ -f configs/konf.lst ] || touch configs/konf.lst

## TODO: Implement.
[ -d plugins ] || mkdir plugins
[ -d libs ] || mkdir libs
error() {
    printf "$1\n\n" 
    printf "See \`kit --help\` for more information.\n"
    exit 1;
}

##
## kit_init : init `kit` program.
## @usage : kit_init
##
kit_init(){
    fetch_packages "libs" "net" "string"
    fetch_packages "plugins" "hello"
}

##
## eval_script : Evaluate the script file.
## @usage : eval_script <script>
##
eval_script() {
    echo "    EXEC \`$1\` ..."
    case `file $1` in
        *"shell script"* ) source $1 ;;
        *"perl script"* ) perl $1 ;;
        *"awk script"* ) awk -f $1 ;;
        *"python script"* ) python $1 ;;
        * )
            case $1 in
                *.sh ) bash $1 ;;
                *.pl ) perl $1 ;;
                *.py ) python $1 ;;
                * ) 
                    case `head -1 $1` in
                        *"bash" ) bash $1 ;;
                        *"sh"  ) sh $1 ;;
                        *"perl" ) perl $1 ;;
                        *"python") python $1 ;;
                        * ) error "[Error] Cannot recorgnize the file \`$1\`!";
                    esac ;;
            esac ;;
    esac
}

##
## cover_conf : Cover configuration files to local.
## @usage : cover_conf <files>
##
cover_conf() {
    for cfg in $@
    do
        case $cfg in
            "all" )
                echo "Covering all configurations, please wait ..."
                sed -n 's/[^:]*:\([^:]*\):\([^:]*\)/cp -rf \2 \1/p' konf.lst | bash 
                echo "done!" ;;
            * ) 
                #exprs="s/$cfg:\\([^:]*\\):\\([^:]*\\)/cp -rf \\2 \\1/p"
                echo "Cover \`$cfg\` configuration ..."
                [ -f "`sed -n "s/$cfg:\\([^:]*\\):\\([^:]*\\)/\\2/p" konf.lst`" ] || error "[Error] Cannot found conf: \`$cfg\`. "
                sed -n "s/$cfg:\\([^:]*\\):\\([^:]*\\)/cp -rf \\2 \\1/p" konf.lst | bash 
                echo "done!" ;;
        esac
    done
}

##
## insert_conf : Insert a new configuration item into konf.lst.
## @usage : insert_conf <name> <local_path> <file>
##
insert_conf(){
    
    [ -f $2 ] || error "[Error] Cannot found \`$2\`."
    [ -e $3 ] && error "[Error] \`$3\` already exists."

    echo "Copying files ..." && cp -rf $2 $3
    echo "Appending records ..." && [ -e $3 ] && echo "$1:$2:$3" >> konf.lst
    [ -e $3 ] && echo "\`$1\` has inserted to conf. "
}

##
## backup_conf : Backup conf from local to konfig.
## @usage : backup_conf <files>
##
backup_conf() {
    for cfg in $@
    do
        case $cfg in
            "all" )
                echo "Backing-up all configurations, please wait ..."
                sed -n 's/[^:]*:\([^:]*\):\([^:]*\)/cp -rf \1 \2/p' konf.lst | bash 
                echo "done!" ;;
            * ) 
                #exprs="s/$cfg:\\([^:]*\\):\\([^:]*\\)/cp -rf \\1 \\2/p"
                echo "Backing-up \`$cfg\` configuration ..."
                [ -f "`sed -n "s/$cfg:\\([^:]*\\):\\([^:]*\\)/\\1/p" konf.lst`" ] || error "[Error] Cannot found local \`$cfg\`, try \`konfig recover\` "
                sed -n "s/$cfg:\\([^:]*\\):\\([^:]*\\)/cp -rf \\1 \\2/p" konf.lst | bash 
                echo "done!" ;;
        esac
    done
}

##
## remove_conf : Remove conf form konfig.
## @usage : remove_conf <files>
##
remove_conf() {
    for cfg in $@
    do
        case $1 in
            "all" )
                echo "Removing all configurations ..."
                cd .. && rm -rf conf
                mkdir conf && cd conf && touch konf.lst
                echo "done!"  ;;
            * )
                echo "Removing \`$cfg\` configuration ..."
                [ -f "`sed -n "s/$cfg:\\([^:]*\\):\\([^:]*\\)/\\2/p" konf.lst`" ] || error "[Error] Cannot found conf: \`$cfg\`. "
                sed -n "s/$cfg:\\([^:]*\\):\\([^:]*\\)/rm -rf \\2/p" konf.lst | bash
                echo "`sed /$cfg.*/d konf.lst`" > konf.lst
                echo "done!" ;;
        esac
    done
}

##
## list_conf : List configurations.
## @usage : list_conf
##
list_conf() {
    awk -F: '{ print $1,"\t\t\t",$2 }' konf.lst
}

##
## put_script : put the script file to scripts folder.
## @usage : put_script <script files>
##
put_script() {
    [ $# -eq 0 ] && error "[Error] Must specify the script name!"
    for script in $@
    do
        echo "Put $script in scripts folder ..."
        if [ -f $script ]
        then
            cp -rf "$script" scripts
        elif [ -f "$curdir/$script" ]
        then
            cp -rf "$curdir/$script" scripts
        else
            error "[Error] Cannot found the file: \`$script\` !"
        fi
    done
}

##
## clean_script : clean the file of scirpts.
## @usage : clean_script <script files> | "all"
##
clean_script() {
    cd scripts
    [ $# -eq 0 ] && error "[Error] Must specify a script name!"
    for script in $@
    do
        case $script  in
            "all" )  
                echo "Cleanning all scripts ..." && rm -rf *
                echo "done!" && exit ;;
            * )
                echo "Cleanning the script \`$script\` ..."
                [ -f $script ] && rm -rf $script 
                [ -e $script ] || error "[Error] Cannot found \`$script\` ." 
                ;;
        esac
    done
    echo "done!"
}


github_raw(){
    if [ -e github.cfg ] 
    then
        user=`sed -n "s/user=\\([^:]*\\)/\\1/p" github.cfg`
        repo=`sed -n "s/repo=\\([^:]*\\)/\\1/p" github.cfg`
        branch=`sed -n "s/branch=\\([^:]*\\)/\\1/p" github.cfg`
    else
        user="kenpusney"
        repo="kit-packages"
        branch="master"
    fi
    echo "https://raw.github.com/$user/$repo/$branch/"
}

##
## fetch_packages : get `lib` of `pack` from internet.
## @usage : fetch_lib <pack> <libs>
##
fetch_packages(){
## TODO : implement
    gh_raw=`github_raw`
    pack="$1" && shift
    for lib in $@
    do
        echo "Fetching \`$lib\` $pack ..."
        curl "$gh_raw/$pack/$lib.sh" > "libs/$lib"
        [ $? -ne 0 ] && error "[Error] Fetching error: repo=$gh_raw && pack=$pack/$lib"
    done
}

##
## load_lib : load `lib` from libs folder.
## @usage : load_lib <lib>
##
load_lib(){
    [ $# -ne 1 ] && error "[Error] Cannot load lib: \`$@\` ."
    case $1 in
        * ) 
            if [ -f "libs/$1.sh" ]
            then
                . "libs/$1.sh"
            else
                error "[Error] Cannot load lib: \`$1\` ."
            fi ;;
    esac
}

##
## Main 
##
echo "[`date`]$@" >> .kit_history
case $1 in
    "init" )
        kit_init ;;
     "recover" | "rec" ) 
        shift && cd configs
        [ $# -eq 0 ] && cover_conf "all"
        [ $# -gt 0 ] && case $1 in
                "all" ) cover_conf "all" ;;
                * ) cover_conf $@ ;;
            esac
        cd .. ;;
    "insert" | "add" ) 
        shift && cd configs
        [ $# -ne 3 ] && error "[Error] Wrong number of arguments: 3 needed."
        insert_conf $@ && cd .. ;;
    "backup" )  
        shift && cd configs
        [ $# -eq 0 ] && backup_conf "all"
        [ $# -gt 0 ] && case $1 in 
                "all" ) backup_conf "all" ;;
                * ) backup_conf $@ ;;
            esac
        cd .. ;;
    "remove" | "rm" )
        shift && cd configs
        [ $# -lt 1 ] && error "[Error] Wrong number of arguments: must more than 0."
        remove_conf $@ && cd .. ;;
    "clear" | "clr" )
        shift && cd configs 
        remove_conf "all" && cd ..  ;;
    "list" | "ls" ) 
        shift && cd configs 
        list_conf && cd .. ;;
    "put" ) 
        shift && put_script $@ ;;
    "clean" )
        shift && clean_script $@ ;;
    "fetch" )
        shift && fetch_packages $@;;
    #"hello" ) 
    #    load_lib "hello"
    #    hello
    #    ;;
    * ) 
        if [ -e "plugins/$1.sh" ]
        then
            plgn=$1
            shift && . "plugins/$plgn.sh"
        else
            error "[Error] Unknown command \`$1\`."
        fi ;;
esac


