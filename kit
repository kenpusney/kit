#!/bin/bash

##
##  Automate configuration script.
##  
##  Author: Kim Leo <kenpusney@gmail.com>
##  http://github.com/kenpusney
##

##
## Initialization scripts
##

curdir="`pwd`"
basedir="/usr/lib/kit"

[ -d ~/.kit ] || mkdir ~/.kit
cd ~/.kit
workdir="~/.kit"
[ -d scripts ] || mkdir scripts
[ -d configs ] || mkdir configs
[ -f configs/konf.lst ] || touch configs/konf.lst

## TODO: Implement.
[ -d plugins ] || mkdir plugins
[ -d libs ] || mkdir libs
error() {
    printf "$1\n\n" 
    printf "See \`kit --help\` for more information.\n"
    exit 1;
}

##
## kit_init : init `kit` program.
## @usage : kit_init
##
kit_init(){
    fetch_packages "libs" "net" "string"
    fetch_packages "plugins" "hello" "conf"
}

##
## eval_script : Evaluate the script file.
## @usage : eval_script <script>
##
eval_script() {
    echo "    EXEC \`$1\` ..."
    case `file $1` in
        *"shell script"* ) source $1 ;;
        *"perl script"* ) perl $1 ;;
        *"awk script"* ) awk -f $1 ;;
        *"python script"* ) python $1 ;;
        * )
            case $1 in
                *.sh ) bash $1 ;;
                *.pl ) perl $1 ;;
                *.py ) python $1 ;;
                * ) 
                    case `head -1 $1` in
                        *"bash" ) bash $1 ;;
                        *"sh"  ) sh $1 ;;
                        *"perl" ) perl $1 ;;
                        *"python") python $1 ;;
                        * ) error "[Error] Cannot recorgnize the file \`$1\`!";
                    esac ;;
            esac ;;
    esac
}

gh_raw(){
    if [ -e github.cfg ] 
    then
        user=`sed -n "s/user=\\([^:]*\\)/\\1/p" github.cfg`
        repo=`sed -n "s/repo=\\([^:]*\\)/\\1/p" github.cfg`
        branch=`sed -n "s/branch=\\([^:]*\\)/\\1/p" github.cfg`
    elif [ $# -eq 3 ]
    then
        user="$1"
        repo="$2"
        branch="$3"
    else
        user="kenpusney"
        repo="kit-packages"
        branch="master"
    fi
    echo "https://raw.github.com/$user/$repo/$branch/"
}

##
## fetch_packages : get `lib` of `pack` from internet.
## @usage : fetch_lib <pack> <libs>
##
fetch_packages(){
## TODO : implement
    url=`gh_raw`
    pack="$1" && shift
    for lib in $@
    do
        echo "Fetching \`$lib\` $pack ..."
        curl "$url/$pack/$lib.sh" > "libs/$lib"
        [ $? -ne 0 ] && error "[Error] Fetching error: repo=$url && pack=$pack/$lib"
    done
}

##
## load_lib : load `lib` from libs folder.
## @usage : load_lib <lib>
##
load_lib(){
    [ $# -ne 1 ] && error "[Error] Cannot load lib: \`$@\` ."
    case $1 in
        * ) 
            if [ -f "libs/$1.sh" ]
            then
                . "libs/$1.sh"
            else
                error "[Error] Cannot load lib: \`$1\` ."
            fi ;;
    esac
}

##
## Main 
##
echo "[`date`]$@" >> .kit_history
case $1 in
    "init" )
        kit_init ;;
    "fetch" )
        shift && fetch_packages $@;;
    #"hello" ) 
    #    load_lib "hello"
    #    hello
    #    ;;
    * ) 
        if [ -e "plugins/$1.sh" ]
        then
            plgn=$1
            shift && . "plugins/$plgn.sh"
        else
            error "[Error] Unknown command \`$1\`."
        fi ;;
esac


